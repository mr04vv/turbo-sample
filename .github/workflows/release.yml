name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - uses: pnpm/action-setup@v4
        with:
          version: 8.15.6

      - name: Install Dependencies
        run: pnpm install
        
      - name: Get list of changed packages
        id: get_changed_packages
        run: |
          changed_packages=$(npx changeset status --since-ref=$(git rev-parse HEAD~1) --json | jq -r '.releases[].name')
          echo "::set-output name=changed_packages::${changed_packages}"

      - name: Release changed packages
        if: steps.get_changed_packages.outputs.changed_packages != ''
        run: |
          for package in $(echo ${{ steps.get_changed_packages.outputs.changed_packages }}); do
            # Replace this with your custom release script for each package
            echo "Releasing $package"
            # Example: Create a GitHub release and push tags
            version=$(jq -r ".version" "packages/$package/package.json")
            tag="v${version}"
            git tag $tag
            git push origin $tag

            # Create a GitHub release using the `gh` CLI
            gh release create $tag --title "$package $version" --notes "Release notes for $package $version"
          done